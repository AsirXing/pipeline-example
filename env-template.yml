apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: cicd-generic-env
  annotations:
    description: "Generic environment for CICD demonstration"
    tags: "cicd,test,production,env"
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APP_IMAGE_NAME}
    namespace: ${NAMESPACE}
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
    triggers:
      - type: ImageChange
        imageChangeParams:
          automatic: false
          containerNames:
            - ${APP_IMAGE_NAME}
          from:
            kind: ImageStreamTag
            namespace: ${APP_IMAGE_NAMESPACE}
            name: '${APP_IMAGE_NAME}:${APP_IMAGE_TAG}'
    replicas: 2
    test: false
    selector:
      deployment-config.name: ${APP_IMAGE_NAME}
    template:
      metadata:
        labels:
          deployment-config.name: ${APP_IMAGE_NAME}
      spec:
        containers:
          - name: ${APP_IMAGE_NAME}
            image: ""
            resources: {}
            terminationMessagePath: /dev/termination-log
            imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_IMAGE_NAME}
    namespace: ${NAMESPACE}
  spec:
    ports:
      - protocol: TCP
        port: 8080
        targetPort: 8080
    selector:
      deployment-config.name: ${APP_IMAGE_NAME}
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP_IMAGE_NAME}
    namespace: ${NAMESPACE}
  spec:
    host: ${HOSTNAME}
    to:
      kind: Service
      name: ${APP_IMAGE_NAME}
      weight: 100
    port:
      targetPort: 8080
    wildcardPolicy: None
- apiVersion: v1
  kind: ResourceQuota
  metadata:
    name: pod-limitation
  spec:
    hard:
      pods: ${POD_LIMITATION}
    scopes:
    - NotTerminating
parameters:
- description: "Project namespace in OpenShift"
  name: NAMESPACE
  required: true
- description: "Name of the app"
  name: APP_IMAGE_NAME
  value: "myapp"
  required: true
- description: "Project namespace where is located the image to use"
  name: APP_IMAGE_NAMESPACE
  value: "development"
  required: true
- description: "IP of the OpenShift Docker Registry"
  name: APP_IMAGE_TAG
  required: true
- description: "Maximum number of pods in this environment"
  value: "4"
  name: POD_LIMITATION
  required: false
- description: "Hostname of the application"
  value: "4"
  name: HOSTNAME
  required: true
