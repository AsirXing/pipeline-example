apiVersion: v1
kind: BuildConfig
metadata:
  name: cicdpipeline
  namespace: cicd
  labels:
    name: cicdpipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "myapp", "namespace": "", "kind": "DeploymentConfig"}]'
spec:
  triggers:
    - type: GitHub
      github:
        secret: secret101
    - type: Generic
      generic:
        secret: secret101
  runPolicy: Serial
  source:
    type: None
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: >-
        node('maven') {

            stage 'Development - Build'

            openshiftBuild(namespace: 'development', buildConfig: 'myapp',
            showBuildLogs: 'true')


            stage 'Development - Deploy'

            openshiftDeploy(namespace: 'development', deploymentConfig: 'myapp')

            openshiftScale(namespace: 'development', deploymentConfig:
            'myapp',replicaCount: '1')


            stage 'Development - Static Code Analysis'

            git branch: 'master', url:'http://gitlab.cloudapps.example.com/dev_redhat/angulartodo.git'

            sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar -Dsonar.host.url=http://sonarqube:9000'

        }

        node('nodejs') {

            stage 'Development - Unit Testing'

            git branch: 'master', url:'http://gitlab.cloudapps.example.com/dev_redhat/angulartodo.git'

            sh 'npm install -g jasmine'

            sh 'jasmine'


            stage 'Test - Deploy'

            openshiftTag(namespace: 'development', sourceStream: 'myapp',
            sourceTag: 'latest', destinationStream: 'myapp', destinationTag:
            'promoteToQA')

            openshiftDeploy(namespace: 'test', deploymentConfig: 'myapp')

            openshiftScale(namespace: 'test', deploymentConfig:
            'myapp',replicaCount: '2')


            stage 'Production - Wait for Approval'

            input 'Do you want to deploy this application in production?'

            openshiftTag(namespace: 'development', sourceStream: 'myapp',
            sourceTag: 'promoteToQA', destinationStream: 'myapp', destinationTag:
            'promoteToProd')

            stage 'Production -Deploy'

            openshiftDeploy(namespace: 'production', deploymentConfig: 'myapp')

            openshiftScale(namespace: 'production', deploymentConfig:
            'myapp',replicaCount: '2')

        }
  output: {}
  resources: {}
  postCommit: {}
